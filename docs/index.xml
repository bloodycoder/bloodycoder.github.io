<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terminal</title>
    <link>https://bloodycoder.github.io/</link>
    <description>Recent content on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 20 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://bloodycoder.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>股市随笔</title>
      <link>https://bloodycoder.github.io/posts/2023_09_20/</link>
      <pubDate>Wed, 20 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bloodycoder.github.io/posts/2023_09_20/</guid>
      <description>目录上证指数3108点, 缩量下跌.
今日净亏损1000块. 表面上看起来亏得多，但和大盘比起来，不值一提. 我的目标是跑赢大盘.
而且我的标的都是经过挑选，股息率很高，并且ROE较为稳定的(&amp;gt;20%)
不知为何, 想写点什么, 因为我知道今天就是底部.
不信的话，过一个月再回来看吧。
不可倒在黎明前的前夜.
摘抄几句巴菲特致股东的信里写的话:
我们这一年是盈利还是亏损不能衡量出我们做的好还是不好 我们选择投资的依据是价值高低，不是热门与否 我们在每一笔投资都追求极大的安全边际并分散投资 如果企业的市场价格低于其内在价值，市场力量最终将会纠正这种价值低估，因为从长期看，市场是有效的 没人知道市场还会继续下跌，只有独立思考 不要根据传言就交易。这个钱我们不赚 股票仅仅是我们拥有公司资产的一种手段，当我们把资金投进去时，我们就进入公司实际经营当中去了。 共勉.</description>
      <content>&lt;div&gt;
    &lt;h2&gt;目录&lt;/h2&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;&lt;/nav&gt;
&lt;/div&gt;
&lt;p&gt;上证指数3108点, 缩量下跌.&lt;/p&gt;
&lt;p&gt;今日净亏损1000块. 表面上看起来亏得多，但和大盘比起来，不值一提. 我的目标是跑赢大盘.&lt;/p&gt;
&lt;p&gt;而且我的标的都是经过挑选，股息率很高，并且ROE较为稳定的(&amp;gt;20%)&lt;/p&gt;
&lt;p&gt;不知为何, 想写点什么, 因为我知道今天就是底部.&lt;/p&gt;
&lt;p&gt;不信的话，过一个月再回来看吧。&lt;/p&gt;
&lt;p&gt;不可倒在黎明前的前夜.&lt;/p&gt;
&lt;p&gt;摘抄几句巴菲特致股东的信里写的话:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们这一年是盈利还是亏损不能衡量出我们做的好还是不好&lt;/li&gt;
&lt;li&gt;我们选择投资的依据是价值高低，不是热门与否&lt;/li&gt;
&lt;li&gt;我们在每一笔投资都追求极大的安全边际并分散投资&lt;/li&gt;
&lt;li&gt;如果企业的市场价格低于其内在价值，市场力量最终将会纠正这种价值低估，因为从长期看，市场是有效的&lt;/li&gt;
&lt;li&gt;没人知道市场还会继续下跌，只有独立思考&lt;/li&gt;
&lt;li&gt;不要根据传言就交易。这个钱我们不赚&lt;/li&gt;
&lt;li&gt;股票仅仅是我们拥有公司资产的一种手段，当我们把资金投进去时，我们就进入公司实际经营当中去了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;共勉.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>源码剖析 listen</title>
      <link>https://bloodycoder.github.io/posts/linux_socket/</link>
      <pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://bloodycoder.github.io/posts/linux_socket/</guid>
      <description>目录前言 socket干了啥 bind 干了啥 listen 干了啥 accept 干了啥 前言 内核版本linux-5.0.1. released on 2019年3月4日
主要源码位于socket.c中
//创建socket int s = socket(AF_INET, SOCK_STREAM, 0); //绑定 bind(s, ...) //监听 listen(s, ...) //接受客户端连接 int c = accept(s, ...) //接收客户端数据 recv(c, ...); //将数据打印出来 printf(...) 首先根据syscall_64.tbl可以知道bind、listen、accept都是系统调用
41	common	socket	__x64_sys_socket43	common	accept	__x64_sys_accept...49	common	bind	__x64_sys_bind50	common	listen	__x64_sys_listen socket干了啥 创建了一个文件，初始化socket结构体，并且实现了文件和socket的互相绑定。最终返回文件的文件描述符.
struct socket { socket_state	state; short	type; unsigned long	flags; struct socket_wq	*wq; struct file	*file; //socket需要和一个文件绑定.</description>
      <content>&lt;div&gt;
    &lt;h2&gt;目录&lt;/h2&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#前言&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#socket干了啥&#34;&gt;socket干了啥&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#bind-干了啥&#34;&gt;bind 干了啥&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#listen-干了啥&#34;&gt;listen 干了啥&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#accept-干了啥&#34;&gt;accept 干了啥&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;内核版本linux-5.0.1. released  on 2019年3月4日&lt;/p&gt;
&lt;p&gt;主要源码位于socket.c中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//创建socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//绑定
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(s, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//监听
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(s, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//接受客户端连接
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(s, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//接收客户端数据
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(c, ...);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//将数据打印出来
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(...)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先根据&lt;code&gt;syscall_64.tbl&lt;/code&gt;可以知道bind、listen、accept都是系统调用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;41	common	socket			__x64_sys_socket
43	common	accept			__x64_sys_accept
...
49	common	bind			__x64_sys_bind
50	common	listen			__x64_sys_listen
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;socket干了啥&#34;&gt;socket干了啥&lt;/h1&gt;
&lt;p&gt;创建了一个文件，初始化socket结构体，并且实现了文件和socket的互相绑定。最终返回文件的文件描述符.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; socket {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	socket_state		state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt;			type;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;		flags;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; socket_wq	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;wq;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; file		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;file; &lt;span style=&#34;color:#75715e&#34;&gt;//socket需要和一个文件绑定.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sock		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sk;  &lt;span style=&#34;color:#75715e&#34;&gt;//sockets的网络层表示
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proto_ops	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ops;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;socket_state的枚举含义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;● SS_FREE = 0,			/* not allocated		*/
● SS_UNCONNECTED,		/* unconnected to any socket	*/
● SS_CONNECTING,		/* in process of connecting	*/
● SS_CONNECTED,			/* connected to socket		*/
● SS_DISCONNECTING		/* in process of disconnecting	*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，调用socket的返回值的fd由sock_map_fd返回.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bloodycoder.github.io/images/accept0/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;bind-干了啥&#34;&gt;bind 干了啥&lt;/h1&gt;
&lt;p&gt;eee&lt;/p&gt;
&lt;h1 id=&#34;listen-干了啥&#34;&gt;listen 干了啥&lt;/h1&gt;
&lt;p&gt;在listen中的主要任务:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置socket状态为TCP_LISTEN&lt;/li&gt;
&lt;li&gt;将socket链入半连接队列的Hash表中&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;C:%5CUsers%5CPicard%5CDropbox%5Cdraw.io%E5%9B%BE%E7%89%87%5Clinux_listen_ac.drawio.png&#34; alt=&#34;linux_listen_ac.drawio&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;struct sock *tcp_check_req(struct sock *sk, struct sk_buff *skb,
			   struct request_sock *req,
			   bool fastopen, bool *req_stolen)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个看着像三次握手的代码.&lt;/p&gt;
&lt;h1 id=&#34;accept-干了啥&#34;&gt;accept 干了啥&lt;/h1&gt;
</content>
    </item>
    
    <item>
      <title>About</title>
      <link>https://bloodycoder.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://bloodycoder.github.io/about/</guid>
      <description>Hi there picardxie@foxmail.com</description>
      <content>&lt;h1 id=&#34;hi-there&#34;&gt;Hi there&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;mailto:picardxie@foxmail.com&#34;&gt;picardxie@foxmail.com&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
