<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>socket on Terminal</title>
    <link>https://example.com/tags/socket/</link>
    <description>Recent content in socket on Terminal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://example.com/tags/socket/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>源码剖析 listen</title>
      <link>https://example.com/posts/linux_socket/</link>
      <pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/posts/linux_socket/</guid>
      <description>目录前言 socket干了啥 bind 干了啥 listen 干了啥 accept 干了啥 前言 内核版本linux-5.0.1. released on 2019年3月4日
主要源码位于socket.c中
//创建socket int s = socket(AF_INET, SOCK_STREAM, 0); //绑定 bind(s, ...) //监听 listen(s, ...) //接受客户端连接 int c = accept(s, ...) //接收客户端数据 recv(c, ...); //将数据打印出来 printf(...) 首先根据syscall_64.tbl可以知道bind、listen、accept都是系统调用
41	common	socket	__x64_sys_socket43	common	accept	__x64_sys_accept...49	common	bind	__x64_sys_bind50	common	listen	__x64_sys_listen socket干了啥 创建了一个文件，初始化socket结构体，并且实现了文件和socket的互相绑定。最终返回文件的文件描述符.
struct socket { socket_state	state; short	type; unsigned long	flags; struct socket_wq	*wq; struct file	*file; //socket需要和一个文件绑定.</description>
      <content>&lt;div&gt;
    &lt;h2&gt;目录&lt;/h2&gt;
    &lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#前言&#34;&gt;前言&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#socket干了啥&#34;&gt;socket干了啥&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#bind-干了啥&#34;&gt;bind 干了啥&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#listen-干了啥&#34;&gt;listen 干了啥&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#accept-干了啥&#34;&gt;accept 干了啥&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;/div&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;内核版本linux-5.0.1. released  on 2019年3月4日&lt;/p&gt;
&lt;p&gt;主要源码位于socket.c中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//创建socket
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//绑定
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;bind(s, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//监听
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;listen(s, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//接受客户端连接
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; accept(s, ...)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//接收客户端数据
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;recv(c, ...);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//将数据打印出来
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;printf(...)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先根据&lt;code&gt;syscall_64.tbl&lt;/code&gt;可以知道bind、listen、accept都是系统调用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;41	common	socket			__x64_sys_socket
43	common	accept			__x64_sys_accept
...
49	common	bind			__x64_sys_bind
50	common	listen			__x64_sys_listen
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;socket干了啥&#34;&gt;socket干了啥&lt;/h1&gt;
&lt;p&gt;创建了一个文件，初始化socket结构体，并且实现了文件和socket的互相绑定。最终返回文件的文件描述符.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; socket {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	socket_state		state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;short&lt;/span&gt;			type;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;		flags;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; socket_wq	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;wq;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; file		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;file; &lt;span style=&#34;color:#75715e&#34;&gt;//socket需要和一个文件绑定.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sock		&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;sk;  &lt;span style=&#34;color:#75715e&#34;&gt;//sockets的网络层表示
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; proto_ops	&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;ops;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;socket_state的枚举含义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;● SS_FREE = 0,			/* not allocated		*/
● SS_UNCONNECTED,		/* unconnected to any socket	*/
● SS_CONNECTING,		/* in process of connecting	*/
● SS_CONNECTED,			/* connected to socket		*/
● SS_DISCONNECTING		/* in process of disconnecting	*/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，调用socket的返回值的fd由sock_map_fd返回.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://example.com/images/accept0/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;bind-干了啥&#34;&gt;bind 干了啥&lt;/h1&gt;
&lt;h1 id=&#34;listen-干了啥&#34;&gt;listen 干了啥&lt;/h1&gt;
&lt;h1 id=&#34;accept-干了啥&#34;&gt;accept 干了啥&lt;/h1&gt;
</content>
    </item>
    
  </channel>
</rss>
